//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCollectRadius;

    public static Entitas.IMatcher<GameEntity> CollectRadius {
        get {
            if (_matcherCollectRadius == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CollectRadius);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCollectRadius = matcher;
            }

            return _matcherCollectRadius;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Gameplay.Features.Loot.CollectRadius collectRadius { get { return (Gameplay.Features.Loot.CollectRadius)GetComponent(GameComponentsLookup.CollectRadius); } }
    public float CollectRadius { get { return collectRadius.Value; } }
    public bool hasCollectRadius { get { return HasComponent(GameComponentsLookup.CollectRadius); } }

    public GameEntity AddCollectRadius(float newValue) {
        var index = GameComponentsLookup.CollectRadius;
        var component = (Gameplay.Features.Loot.CollectRadius)CreateComponent(index, typeof(Gameplay.Features.Loot.CollectRadius));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCollectRadius(float newValue) {
        var index = GameComponentsLookup.CollectRadius;
        var component = (Gameplay.Features.Loot.CollectRadius)CreateComponent(index, typeof(Gameplay.Features.Loot.CollectRadius));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCollectRadius() {
        RemoveComponent(GameComponentsLookup.CollectRadius);
        return this;
    }
}
