//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherShootTimeLeft;

    public static Entitas.IMatcher<GameEntity> ShootTimeLeft {
        get {
            if (_matcherShootTimeLeft == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ShootTimeLeft);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherShootTimeLeft = matcher;
            }

            return _matcherShootTimeLeft;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Gameplay.Features.Hero.ShootTimeLeft shootTimeLeft { get { return (Gameplay.Features.Hero.ShootTimeLeft)GetComponent(GameComponentsLookup.ShootTimeLeft); } }
    public float ShootTimeLeft { get { return shootTimeLeft.Value; } }
    public bool hasShootTimeLeft { get { return HasComponent(GameComponentsLookup.ShootTimeLeft); } }

    public GameEntity AddShootTimeLeft(float newValue) {
        var index = GameComponentsLookup.ShootTimeLeft;
        var component = (Gameplay.Features.Hero.ShootTimeLeft)CreateComponent(index, typeof(Gameplay.Features.Hero.ShootTimeLeft));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceShootTimeLeft(float newValue) {
        var index = GameComponentsLookup.ShootTimeLeft;
        var component = (Gameplay.Features.Hero.ShootTimeLeft)CreateComponent(index, typeof(Gameplay.Features.Hero.ShootTimeLeft));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveShootTimeLeft() {
        RemoveComponent(GameComponentsLookup.ShootTimeLeft);
        return this;
    }
}
