//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAmmoCurrent;

    public static Entitas.IMatcher<GameEntity> AmmoCurrent {
        get {
            if (_matcherAmmoCurrent == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AmmoCurrent);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAmmoCurrent = matcher;
            }

            return _matcherAmmoCurrent;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Gameplay.Features.Hero.AmmoCurrent ammoCurrent { get { return (Gameplay.Features.Hero.AmmoCurrent)GetComponent(GameComponentsLookup.AmmoCurrent); } }
    public int AmmoCurrent { get { return ammoCurrent.Value; } }
    public bool hasAmmoCurrent { get { return HasComponent(GameComponentsLookup.AmmoCurrent); } }

    public GameEntity AddAmmoCurrent(int newValue) {
        var index = GameComponentsLookup.AmmoCurrent;
        var component = (Gameplay.Features.Hero.AmmoCurrent)CreateComponent(index, typeof(Gameplay.Features.Hero.AmmoCurrent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAmmoCurrent(int newValue) {
        var index = GameComponentsLookup.AmmoCurrent;
        var component = (Gameplay.Features.Hero.AmmoCurrent)CreateComponent(index, typeof(Gameplay.Features.Hero.AmmoCurrent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAmmoCurrent() {
        RemoveComponent(GameComponentsLookup.AmmoCurrent);
        return this;
    }
}
