//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherCastRange;

    public static Entitas.IMatcher<GameEntity> CastRange {
        get {
            if (_matcherCastRange == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.CastRange);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherCastRange = matcher;
            }

            return _matcherCastRange;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Gameplay.Features.TargetCollection.CastRange castRange { get { return (Gameplay.Features.TargetCollection.CastRange)GetComponent(GameComponentsLookup.CastRange); } }
    public float CastRange { get { return castRange.Value; } }
    public bool hasCastRange { get { return HasComponent(GameComponentsLookup.CastRange); } }

    public GameEntity AddCastRange(float newValue) {
        var index = GameComponentsLookup.CastRange;
        var component = (Gameplay.Features.TargetCollection.CastRange)CreateComponent(index, typeof(Gameplay.Features.TargetCollection.CastRange));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceCastRange(float newValue) {
        var index = GameComponentsLookup.CastRange;
        var component = (Gameplay.Features.TargetCollection.CastRange)CreateComponent(index, typeof(Gameplay.Features.TargetCollection.CastRange));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveCastRange() {
        RemoveComponent(GameComponentsLookup.CastRange);
        return this;
    }
}
